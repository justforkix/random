
====================
 DNS
====================
# DNS Lookup
% dig random.com +short
173.194.33.99

# ReverseE DNS Lookup
% dig -x 173.194.33.99 +short  
random.com

====================
 GREP
====================
# grep (see egrep, zgrep)
% grep "REGEX_PATTERN" FILE_PATTERN

# Case insentitive
% grep -i "woot" file.txt

# Check for full words and not substrings
% grep -w "woot" file.txt

# Display lines before/after/around
% grep -A 3 "woot" file.txt
% grep -B 2 "woot" file.txt
% grep -C 2 "woot" file.txt

# Recursive search
% grep -r "woot" *

# Display lines not matching pattern
% grep -v "woot" file.txt

# Display lines matching multiple patterns
% grep -e "a" -e "b" -e "c" file.txt

# Number of matches
% grep -c "woot" file.txt

# Display only filenames matching pattern
% grep -l woot file_*.txt

# Show only the matched string matching the pattern
% grep -o "wo.*t" file.txt

# Show line number
% grep -n "woot" file.txt

# Exclude filename in the output
% grep -h  "woot" file.txt

# Print filename in the output
% grep -H "woot" file.txt

# Display matches in color
(color doesn't work in combination with less)
% grep --color "woot" file.txt

# Extended Grep (egrep)
% grep -E 'pattern1|pattern2' file.txt

# Stop reading file after 'n' matches
% grep -m 5 "woot" file.txt

====================
 FIND
====================
# Find files using name
% find -name "MyCProgram.c"

# Find files using name ignoring case
% find -iname "MyCProgram.c"

# Limit search to specific directory level
% find -mindepth 3 -maxdepth 5 -name passwd

# Execute commands on files found by find command
% find -iname "MyCProgram.c" -exec md5sum {} \;

# Inverting the match
% find -maxdepth 1 -not -iname "MyCProgram.c"

# Find files by inode number
% find -inum 16187430 -exec mv {} new-test-file-name \;

# Find files based on permissions
% find . -perm g=r -type f -exec ls -l {} \;
% find . -perm 040 -type f -exec ls -l {} \;

# Find empty files or directories
% find ~ -empty
% find -type d -empty

# Find non-hidden empty files only in the current directory
% find . -maxdepth 1 -empty -not -name ".*"

# Find top 'n' big files
% find . -type f -exec ls -s {} \; | sort -n -r | head -n

# Find top 'n' small files
% find . -type f -exec ls -s {} \; | sort -n  | head -n

# Find files based on file type
% find . -type s (socket files)
% find . -type d (directories)
% find . -type f (normal files)

# Find files by size
% find ~ -size +100M (bigger than size)
% find ~ -size -100M (smaller than size)
% find ~ -size 100M (matching the size)

# Find files based on modification time
% find . -mmin -60 (updated within last 60 min)
% find / -mtime -1 (updated within last day)

# Find files based on access time
% find -amin -60 (accessed within last 60 min)
% find / -atime -1 (accessed within last day)

# Find files based on inode change time
% find . -cmin -60
% find / -ctime -1

# Find files which are modified after modification of a particular FILE
% find -newer FILE

# Find files which are accessed after modification of a specific FILE
% find -anewer FILE

# Find files whose status got changed after the modification of a specific FILE
% find -cnewer FILE

# Using more than one { } in same command
% find -name "*.txt" cp {} {}.bkup \;

# Redirecting errors to /dev/null
% find -name "*.txt" 2>>/dev/null

# Restricting the search only to unhidden files (use iregex for case insensitive match)
% find .  \( ! -regex ".*/\..*" \)

#  Substitute space with underscore in the file name
% find . -type f -iname “*.mp3″ -exec rename “s/ /_/g” {} \;

# Executing two find commands at the same time (traverses filesystem just once)
% find /    \( -perm -4000 -fprintf /root/suid.txt '%#m %u %p\n' \) , \
 \( -size +100M -fprintf /root/big.txt '%-10s %p\n' \)

====================
 CURL
====================
# Specify request method (default is 'GET')
% curl -X POST echo.random.com

# Specify request headers
% curl -H "Accept: application/json" \
     -H "Authorization: OAuth 2c3455d1aeffc" \
     http://echo.random.com

# Specify request body
% curl -X PUT \
     -H 'Content-Type: application/json' \
     -d '{"firstName":"Hello", "lastName":"World"}'
     echo.random.com

# Specify request body from a file example.json
curl -X PUT \
     -H 'Content-Type: application/json' \
     -d @example.json
     echo.random.com

# Post html form data. using -d we can specify URL encoded field names and values
% curl -d "firstName=Hello" \
     -d "lastName=World" \
     echo.random.com

# Post HTML Multipart forms
% curl -F "firstName=Hello" \
     -F "publicKey=@idrsa.pub;type=text/plain" \
     echo.random.com

# View response headers
% curl -i echo.random.com

# Save curl output to file with provided filename
% curl -o myfile.html http://www.gnu.org/manual/file.html

# Save curl output to file with filename taken from URL
% curl -O http://www.gnu.org/manual/file.html

# Fetch multiple files at a time
% curl -O http://www.gnu.org/manual/file1.html -O http://www.gnu.org/manual/file2.html

# Follow redirects
% curl -L http://www.random.com

# Limit the rate of data transfer (1000 Bytes/sec)
% curl --limit-rate 1000B -O http://www.gnu.org/manual/file.html

# Download a file only if it is modified after / before a given time
curl -z 21-Dec-11 http://www.gnu.org/manual/file.html
curl -z -21-Dec-11 http://www.gnu.org/manual/file.html

# Pass HTTP authentication (default is Basic HTTP Authentication. Specify other using –ntlm | –digest)
% curl -u username:password URL

# Download files from FTP server
% curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/xss.php

# List all files in a given directory
% curl -u ftpuser:ftppass -O ftp://ftp_server/public_html/

# Upload a file to a FTP server
% curl -u ftpuser:ftppass -T myfile.txt ftp://ftp.testserver.com

# Specify detailed output
% curl -v -trace http://random.co.in

# Use proxy to download file
% curl -x proxysever.test.com:3128 http://random.co.in

====================
 SORT
====================
# Ignore spaces at the beginning of the line
% sort -b file

# Remove duplicates
% sort -u file

# Sort case-insensitively
% sort -f file

# Write sorted output to file
% sort -o outfile file 

# Sort in numerical order instead of default alphabetic order
% sort -n file

# Sort numerically in reverse order
% sort -nr file

# Sort multiple files
% sort -n file1 file2

# Sort by first field
% sort -t "," -k1,1 file

# Sort by second field
% sort -t "," -k2,2 file

# Sort by second field numerically
% sort -t"," -k2n,2 file

# Sort by second field numerically in reverse order
% sort -t"," -k2nr,2 file

# Sort by first field and remove duplicates
% sort -t "," -k1,1 -u file

# Sort the file alphabetically on the 1st field, numerically on the 2nd field
% sort -t "," -k1,1 -k2n,2 file

# Sort a file based on the 1st and 2nd field, and numerically on 3rd field
% sort -t "," -k1,2 -k3n,3 file 

====================
 DU
====================
# To find out the disk usage summary of a /home/joe directory tree and each of its sub directories
% du -h /home/joe  (h - human readable)

# To get the summary of a grand total disk usage size of a directory
% du -sh /home/joe

# Displays the disk usage of all the files and directories
% du -ah /home/joe

# Grand total usage disk space as the last line
% du -ch /home/joe

# Exclude files and directories
% du -ch --exclude “logs” /home/joe  (exclude relative to specified path not absolute)
% du -ah --exclude="*.txt" /home/joe

====================
 DF
====================
# Disk space utilization in human readable format
% df -h

# Display file system inodes
% df -hi

# Display file system type
% df -hT

====================
 CPU INFO
====================
# Find number of CPU cores
% nproc
% top (press 1)

# Count the number of “physical processor(s)”
% grep "physical id" /proc/cpuinfo | sort -u | wc -l

# Count the number of “physical cores per CPU”
% grep "cpu cores" /proc/cpuinfo |sort -u |cut -d":" -f2

# Count the number of “logical cores ” (including multi-threading cores)
% grep -c "processor" /proc/cpuinfo

# CPU architecture information
% lscpu
% cat /proc/cpuinfo

====================
 MEM INFO
====================
% free -m (in MB)

# Display at 5 seconds interval
% free -s 5
% cat /proc/meminfo

====================
 UPTIME 
====================

====================
 SADC 
====================


====================
 ALIAS 
====================

====================
 CAT 
====================

====================
 CD 
====================

====================
 CHMOD 
====================

====================
 CHOWN 
====================

====================
 CP 
====================

====================
 CPIO 
====================

====================
 CRONTAB 
====================

====================
 ENV 
====================

====================
 ECHO 
====================

====================
 EXPORT 
====================

====================
 FTP 
====================

====================
 GZIP 
====================

====================
 ID 
====================

====================
 IFCONFIG 
====================

====================
 IFUP 
====================

====================
 IFDOWN 
====================

====================
 HEAD 
====================

====================
 TAIL 
====================

====================
 LAST 
====================

====================
 LN 
====================

====================
 LS 
====================

====================
 MAN 
====================

====================
 MV 
====================

====================
 NETSTAT 
====================

====================
 PING 
====================

====================
 PS 
====================

====================
 PWD 
====================

====================
 RSYNC 
====================

====================
 RM 
====================

====================
 SHUTDOWN 
====================

====================
 SUDO 
====================

====================
 SSH 
====================

====================
 TAR 
====================

====================
 TRACEROUTE 
====================

====================
 UNAME 
====================

====================
 W 
====================

====================
 WHO 
====================

====================
 WHOAMI 
====================

====================
 WGET
====================

====================
 TOP
====================
# Display specific user process
% top -u webuser

# Sort by field letter
shift + o

# Show absolute path of processes
'c'

# Change screen refresh interval
'd'

# Kill running process
'k'

# Sort process by CPU Utilization
shift + p

# Sort process by Memory
shift + m

# Sort in reverse order
shift + r

# Renice (change priority of) a process
'r'

# Save 'top' results
shift + w

# Exit 'top' after 'num' repititions
% top -n num   

# Display only specific processes with given pids
% top -p 31016, 24465

# Display all cpus / cores in the 'top' output
'1'

# Highlight running processes
'z'

# Execute 'top' command in batch mode
% top -b -n 1

# Change the number of processes displayed in the output
'n'

# Toggle 'top' header
Press l – to hide / show the load average. 1st header line
Press t – to hide / show the CPU states. 2nd and 3rd header line
Press m – to hide / show the memory information. 4th and 5th line

====================
 HTOP
====================

====================
 WATCH
====================

====================
 LN
====================

====================
 AWK
====================

====================
 KILL
====================

====================
 NETSTAT
====================

====================
 SED
====================

====================
 UNIQ
====================

====================
 XARGS
====================

====================
 PS
====================

====================
 SAR
====================

====================
 UPTIME
====================

====================
 VMSTAT
====================

====================
 MPSTAT
====================

====================
 TIME
====================

====================
 SLABTOP
====================

====================
 PMAP
====================

====================
 STRACE
====================

====================
 FREE
====================

====================
 IOSTAT
====================

====================
 NETSTAT
====================

====================
 IFCONFIG
====================

====================
 PING
====================

====================
 TRACEROUTE
====================

====================
 WC
====================

====================
 PUSHD / POPD
====================

====================
 TR
====================

====================
 STTY
====================

====================
 CUT
====================

====================
 JOIN
====================





